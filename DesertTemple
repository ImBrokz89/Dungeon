local targetColor = BrickColor.new("Pine Cone")

local function applyColorToFolder(folder)
    if folder then
        for _, child in ipairs(folder:GetChildren()) do
            if child:IsA("BasePart") then
                child.BrickColor = targetColor
                child.Material = Enum.Material.SmoothPlastic
            elseif child:IsA("Model") then
                for _, part in ipairs(child:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.BrickColor = targetColor
                        part.Material = Enum.Material.SmoothPlastic
                    end
                end
            end
        end
    end
end

local function deleteDecorationsFolder()
    local decorationsFolder = workspace:FindFirstChild("Decorations")
    if decorationsFolder then
        decorationsFolder:Destroy()
    end
end

local function deleteRocksAndBarriers()
    local rocksFolder = workspace:FindFirstChild("Map"):FindFirstChild("Rocks")
    if rocksFolder then
        rocksFolder:Destroy()
    end

    local barrier = workspace.dungeon:FindFirstChild("room3"):FindFirstChild("barrier")
    if barrier then
        barrier:Destroy()
    end
end

local function deleteSpecificTempleElement()
    local temple2 = workspace.Map.Structures:FindFirstChild("Temple2")
    if temple2 then
        local targetPart = temple2:GetChildren()[13]
        if targetPart then
            print("Détruire l'élément spécifique de Temple2.")
            targetPart:Destroy()
        end
    end
end

deleteSpecificTempleElement()

deleteDecorationsFolder()
deleteRocksAndBarriers()

local function refreshColors()
    while true do
        local structuresFolder = workspace:FindFirstChild("Map"):FindFirstChild("Structures")
        if structuresFolder then
            applyColorToFolder(structuresFolder)
        end
        local rocksFolder = workspace:FindFirstChild("Map"):FindFirstChild("Rocks")
        if rocksFolder then
            applyColorToFolder(rocksFolder)
        end
        wait(5)
    end
end

spawn(refreshColors)

--
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- Paramètres
local safeDistance = 10
local ObstacleDistance = 5
local ObstacleClear = 3
local ObstacleCheck = math.rad(45)
local WallSpeed = 20
local SkillCoolDown = 6
local ToolDistance = 12
local DodgeDistance = 5
local DODGE_COOLDOWN = 0.1 

local ignoreObjects = {}

local rayParams = RaycastParams.new()
rayParams.FilterType = Enum.RaycastFilterType.Blacklist

local function updateIgnoreObjects()
    table.insert(ignoreObjects, player.Character)

    local decorations = workspace:FindFirstChild("Decorations")
    if decorations then
        table.insert(ignoreObjects, decorations)
    end

    rayParams.FilterDescendantsInstances = ignoreObjects
end

local function detectObstacle(direction)
    local rayOrigin = player.Character.HumanoidRootPart.Position
    local rayDirection = direction * ObstacleDistance

    local result = workspace:Raycast(rayOrigin, rayDirection, rayParams)
    if result then
        local hitPart = result.Instance
        if hitPart and hitPart.CanCollide then
            return true, hitPart
        end
    end
    return false, nil
end

local function adjustDirection(originalDirection)
    local leftDirection = CFrame.Angles(0, -ObstacleCheck, 0) * originalDirection
    local hasLeftObstacle, _ = detectObstacle(leftDirection)

    if not hasLeftObstacle then
        return leftDirection
    end

    local rightDirection = CFrame.Angles(0, ObstacleCheck, 0) * originalDirection
    local hasRightObstacle, _ = detectObstacle(rightDirection)

    if not hasRightObstacle then
        return rightDirection
    end

    return -originalDirection
end

local function detectAttack()
    for _, obj in pairs(workspace:GetChildren()) do
        if obj:IsA("BasePart") and obj.Name == "Part" then
            local distance = (player.Character.HumanoidRootPart.Position - obj.Position).Magnitude
            if distance <= DodgeDistance then
                return obj
            end
        end
    end
    return nil
end

local function dodgeSideways()
    local attack = detectAttack()
    if attack then
        local direction = (attack.Position - player.Character.HumanoidRootPart.Position).Unit
        local leftDirection = CFrame.Angles(0, math.rad(-90), 0) * direction
        local rightDirection = CFrame.Angles(0, math.rad(90), 0) * direction

        local hasLeftObstacle, _ = detectObstacle(leftDirection)
        local hasRightObstacle, _ = detectObstacle(rightDirection)

        if not hasLeftObstacle then
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + leftDirection * DodgeDistance
        elseif not hasRightObstacle then
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + rightDirection * DodgeDistance
        else
            player.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame + leftDirection * DodgeDistance
        end
    end
end

local function findNearestEnemy()
    local nearestEnemy = nil
    local nearestDistance = math.huge

    for _, room in ipairs(workspace.dungeon:GetChildren()) do
        if room:FindFirstChild("enemyFolder") then
            for _, enemy in ipairs(room.enemyFolder:GetChildren()) do
                if enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid") then
                    local distance = (player.Character.HumanoidRootPart.Position - enemy.HumanoidRootPart.Position).Magnitude
                    if distance < nearestDistance then
                        nearestDistance = distance
                        nearestEnemy = enemy
                    end
                end
            end
        end
    end

    return nearestEnemy
end

local function simulateKeyPress(key)
    local virtualInputManager = game:GetService("VirtualInputManager")
    virtualInputManager:SendKeyEvent(true, key, false, nil)
    wait(0.1)
    virtualInputManager:SendKeyEvent(false, key, false, nil)
end

local function activateToolOrSkill(distance)
    if distance <= ToolDistance then
        simulateKeyPress(Enum.KeyCode.E)
        simulateKeyPress(Enum.KeyCode.Q)
    end
end

local function moveToEnemy(enemy)
    if enemy and enemy:FindFirstChild("HumanoidRootPart") then
        local enemyPosition = enemy.HumanoidRootPart.Position
        local playerPosition = player.Character.HumanoidRootPart.Position
        local distance = (playerPosition - enemyPosition).Magnitude

        local currentOrientation = player.Character.HumanoidRootPart.CFrame.LookVector
        local directionToEnemy = (enemyPosition - playerPosition).Unit
        local angleDiff = math.acos(currentOrientation:Dot(directionToEnemy))

        if angleDiff > 0.1 then
            player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(playerPosition, Vector3.new(enemyPosition.X, playerPosition.Y, enemyPosition.Z))
        end

        local direction = (enemyPosition - playerPosition).Unit

        local hasObstacle, _ = detectObstacle(direction)
        if hasObstacle then
            direction = adjustDirection(direction)
        end

        if distance > safeDistance then
            local targetPosition = playerPosition + direction * (distance - safeDistance)
            player.Character.Humanoid:MoveTo(targetPosition)
        else
            local safeDirection = (playerPosition - enemyPosition).Unit
            local safePosition = playerPosition + safeDirection * (safeDistance - distance + 1)
            player.Character.Humanoid:MoveTo(safePosition)
        end

        activateToolOrSkill(distance)
    end
end

local function autoFarm()
    while true do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local nearestEnemy = findNearestEnemy()
            if nearestEnemy then
                moveToEnemy(nearestEnemy)
                dodgeSideways()
            end
        end
        wait(0.1)
    end
end

local function initializeCharacter(character)
    local humanoid = character:WaitForChild("Humanoid")

    humanoid.WalkSpeed = WallSpeed

    humanoid.Died:Connect(function()
    end)

    task.spawn(autoFarm)
end

player.CharacterAdded:Connect(function(character)
    initializeCharacter(character)
end)

if player.Character then
    initializeCharacter(player.Character)
end

updateIgnoreObjects()
